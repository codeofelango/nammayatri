imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  BatchSplitByPickupDistance: SharedLogic.Allocator.Jobs.SendSearchRequestToDrivers.Handle.Internal.DriverPool.Config
  BatchSplitByPickupDistanceOnRide: SharedLogic.Allocator.Jobs.SendSearchRequestToDrivers.Handle.Internal.DriverPool.Config
  OnRideRadiusConfig: SharedLogic.Allocator.Jobs.SendSearchRequestToDrivers.Handle.Internal.DriverPool.Config
  PoolSortingType: SharedLogic.Allocator.Jobs.SendSearchRequestToDrivers.Handle.Internal.DriverPool.Config
  Seconds: Kernel.Types.Common
  IndianState: Kernel.Types.Beckn.Context
  ServiceTierType: Domain.Types.ServiceTierType
  Area: Lib.Types.SpecialLocation
  Common: Domain.Types.Common
  TimeBound : Domain.Types.TimeBound

DriverPoolConfig:
  tableName: driver_pool_config

  fields:
    id: Id DriverPoolConfig
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    minRadiusOfSearch: Meters
    maxRadiusOfSearch: Meters
    radiusStepSize: Meters
    driverPositionInfoExpiry: Maybe Seconds
    actualDistanceThreshold: Maybe Meters
    maxDriverQuotesRequired: Int
    driverQuoteLimit: Int
    driverRequestCountLimit: Int
    driverBatchSize: Int
    distanceBasedBatchSplit: "[BatchSplitByPickupDistance]"
    maxNumberOfBatches: Int
    maxParallelSearchRequests: Int
    poolSortingType: PoolSortingType
    singleBatchProcessTime: Seconds
    tripDistance: Meters
    radiusShrinkValueForDriversOnRide: Meters
    driverToDestinationDistanceThreshold: Meters
    driverToDestinationDuration: Seconds
    scheduleTryTimes: "[Int]"
    area: Area
    timeBounds: TimeBound|NoRelation
    batchSizeOnRide: Int
    onRideRadiusConfig: "[OnRideRadiusConfig]"
    onRideBatchSplitConfig: "[BatchSplitByPickupDistanceOnRide]"
    enableForwardBatching: Bool
    createdAt: UTCTime
    updatedAt: UTCTime
    vehicleVariant: Maybe ServiceTierType|NoRelation
    tripCategory: Text
    maxParallelSearchRequestsOnRide: Int
    thresholdToIgnoreActualDistanceThreshold: Maybe Meters
    actualDistanceThresholdOnRide: Maybe Meters
    currentRideTripCategoryValidForForwardBatching : "[Text]"
    distanceUnit: DistanceUnit
    favDriver: Bool

  beamFields:
    distanceUnit:
      distanceUnit: Maybe DistanceUnit

  fromTType:
    distanceUnit: Kernel.Prelude.fromMaybe Kernel.Types.Common.Meter|I

  toTType:
    distanceUnit: Kernel.Prelude.Just|I


  beamInstance:
    - MakeTableInstances
    - Custom Domain.Types.UtilsTH.mkCacParseInstance
  constraints:
    id: PrimaryKey
    merchantOperatingCityId: SecondaryKey

  sqlType:
    distanceBasedBatchSplit: text[]
    onRideRadiusConfig: text[]
    scheduleTryTimes: integer[]
    timeBounds: Text
    onRideBatchSplitConfig: text[]

  default:
    tripCategory: "'All'"
    area: "'Default'"
    distanceBasedBatchSplit: "Array ['BatchSplitByPickupDistance { batchSplitSize = 1, batchSplitDelay = 0 }', 'BatchSplitByPickupDistance { batchSplitSize = 1, batchSplitDelay = 4 }']"
    scheduleTryTimes: "'{1800, 900, 300}'"
    timeBounds: "'Unbounded'"
    batchSizeOnRide: "10"
    onRideRadiusConfig: "ARRAY[]::TEXT[]"
    currentRideTripCategoryValidForForwardBatching: "Array ['OneWay_OneWayOnDemandDynamicOffer']"
    onRideBatchSplitConfig: "Array ['BatchSplitByPickupDistanceOnRide { batchSplitSize = 1, batchSplitDelay = 0 }', 'BatchSplitByPickupDistanceOnRide { batchSplitSize = 1, batchSplitDelay = 4 }']"
    enableForwardBatching: "false"
    maxParallelSearchRequestsOnRide: "1"
    favDriver: "false"

  queries:
    findAllByMerchantOpCityId:
      kvFunction: findAllWithOptionsKV
      where: merchantOperatingCityId
      orderBy: tripDistance

MerchantState:
  tableName: merchant_state

  fields:
    merchantId: Id Merchant
    state: IndianState
    allowedDestinationStates: "[IndianState]"

  excludedFields: [merchantOperatingCityId]

  constraints:
    merchantId: PrimaryKey
    state: PrimaryKey

  sqlType:
    allowedDestinationStates: text[]

  queries:
    findByMerchantIdAndState:
      kvFunction: findOneWithKV
      where:
        and: [merchantId, state]

InterCityTravelCities:
  tableName: inter_city_travel_cities

  fields:
    merchantId: Id Merchant
    cityName: Text
    state: IndianState
    lat: Double
    lng: Double

  excludedFields: [merchantOperatingCityId]

  constraints:
    merchantId: PrimaryKey
    cityName: PrimaryKey

  queries:
    findByMerchantAndState:
      kvFunction: findAllWithKV
      where:
        and: [merchantId, state]

  cachedQueries:
    findByMerchantIdAndState:
      returnType: Array
      withCrossAppRedis: true
      queryType: FindAndCache
      dbQuery: findByMerchantAndState
      dbQueryParams: [merchantId, state]
      keyParams: [merchantId, state]

ValueAddNP:
  tableName: value_add_np

  fields:
    subscriberId: Text
    enabled: Bool

  constraints:
    subscriberId: PrimaryKey

  excludedFields: [merchantId, merchantOperatingCityId]

  queries:
    findAll:
      kvFunction: findAllWithKV
      where: enabled