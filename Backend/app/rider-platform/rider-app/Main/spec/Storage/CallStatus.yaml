imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Ride: Domain.Types.Ride
  CallService: Kernel.External.Call.Types
  EncryptedHashedField: Kernel.External.Encryption
  DbHash: Kernel.External.Encryption


CallStatus:
  tableName: call_status

  types:
    CallAttemptStatus:
      enum: "Attempted, Resolved, Failed"

  fields:
    id : Id CallStatus
    callId : Text
    rideId : Maybe (Id Ride)
    dtmfNumberUsed : Maybe Text
    status : Kernel.External.Call.Interface.Types.CallStatus
    recordingUrl : Maybe Text
    conversationDuration : Int
    merchantId : Maybe Text
    callService : Maybe CallService
    callError : Maybe Text
    callAttempt : Maybe CallAttemptStatus
    callFromNumber: Maybe (EncryptedHashedField e Text)
    createdAt : UTCTime
    customerIvrResponse : Maybe Text

  beamFields:
    callFromNumber:
      callFromNumberEncrypted: Maybe Text
      callFromNumberHash: Maybe DbHash
  
  fromTType:
    callFromNumber: EncryptedHashed <$> (Encrypted <$> callFromNumberEncrypted) <*> callFromNumberHash|E

  toTType:
    callFromNumberEncrypted: (callFromNumber <&> unEncrypted . (.encrypted))|E
    callFromNumberHash: (callFromNumber <&> (.hash))|E

  sqlType:
    callId: character varying(255)
    conversationDuration: int8
    dtmfNumberUsed: character varying(255)
    id: character(36)
    merchantId: character(36)
    recordingUrl: character varying(255)
    rideId: character(36)
    status: varchar(255)
    callFromNumberEncrypted: character varying (255)
    callFromNumberHash: bytea

  constraints:
    id: PrimaryKey
    callId: "!SecondaryKey" # forcing to be a secondary key

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    findByCallId:
      kvFunction: findOneWithKV
      where: callId
    findByRideId:
      kvFunction: findOneWithKV
      where: rideId

    updateCallStatus:
      kvFunction: updateWithKV
      params: [conversationDuration, recordingUrl, status, callAttempt]
      where: id

    updateCallStatusInformation:
      kvFunction: updateWithKV
      params: [status, merchantId, rideId, callService, dtmfNumberUsed]
      where: id

    updateCallError:
      kvFunction: updateWithKV
      params: [callError, callService, merchantId]
      where: callId

    updateCallAttempt:
      kvFunction: updateWithKV
      params: [callAttempt]
      where: rideId

    updateCustomerIvrResponse:
      kvFunction: updateWithKV
      params: [callId, customerIvrResponse, status]
      where: callId
    updateCallStatusSId:
      kvFunction: updateWithKV
      params: [callId]
      where: id

  excludedFields: [merchantOperatingCityId]

  extraOperations:
    - EXTRA_QUERY_FILE

  excludedDefaultQueries:
    - create

