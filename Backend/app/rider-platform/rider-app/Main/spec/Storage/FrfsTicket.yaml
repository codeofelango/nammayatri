imports:
  UTCTime: Kernel.Prelude
  HighPrecMoney: Kernel.Types.Common
  Currency: Kernel.Types.Common
  Price: Kernel.Types.Common
  ShortId: Kernel.Types.Id
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  FRFSVehicleType: Domain.Types.Station
  FRFSSearch: Domain.Types.FRFSSearch
  FRFSQuote: Domain.Types.FRFSQuote
  FRFSTicketBooking: Domain.Types.FRFSTicketBooking
  FRFSTicket: Domain.Types.FRFSTicket
  FRFSTicketBookingPayment: Domain.Types.FRFSTicketBookingPayment
  Station: Domain.Types.Station
  FRFSQuoteType: Domain.Types.FRFSQuote
  FRFSTicketBookingStatus: Domain.Types.FRFSTicketBooking
  FRFSTicketStatus: Domain.Types.FRFSTicket
  # Gps: Kernel.Types.Common
  PaymentOrder: Lib.Payment.Domain.Types.PaymentOrder
  Person: Domain.Types.Person
  City: Kernel.Types.Beckn.Context
  PartnerOrganization: Domain.Types.PartnerOrganization
  PartnerOrgTransaction: Domain.Types.PartnerOrganization

FRFSSearch:
  tableName: frfs_search

  fields:
    id: Id FRFSSearch
    fromStationId: Id Station
    toStationId: Id Station
    quantity: Int
    vehicleType: FRFSVehicleType
    riderId: Id Person
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId: Maybe (Id PartnerOrgTransaction)
    partnerOrgId: Maybe (Id PartnerOrganization)

  constraints:
    riderId: "!SecondaryKey" # forcing to be a secondary key

  queries:
    getTicketPlaces:
      kvFunction: findAllWithKV
      where: merchantOperatingCityId
    findById:
      kvFunction: findOneWithKV
      where: id

Station:
  tableName: station

  fields:
    id: Id Station
    vehicleType: FRFSVehicleType
    name: Text
    code: Text
    lat: Maybe Double
    lon: Maybe Double
    address: Maybe Text
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity

  types:
    FRFSVehicleType:
      enum: "METRO, BUS"
      derive: HttpInstance

  constraints:
    id: PrimaryKey
    code: SecondaryKey

  queries:
    getTicketPlacesByMerchantOperatingCityIdAndVehicleType:
      kvFunction: findAllWithKV
      where:
        and: [merchantOperatingCityId, vehicleType]
    getTicketPlacesByVehicleType:
      kvFunction: findAllWithKV
      where: vehicleType
    findById:
      kvFunction: findOneWithKV
      where: id
    findByStationCode:
      kvFunction: findOneWithKV
      where: code

FRFSQuote:
  tableName: frfs_quote
  derives: "Generic,Show"
  fields:
    id: Id FRFSQuote
    bppItemId: Text
    searchId: Id FRFSSearch
    _type: FRFSQuoteType
    fromStationId: Id Station
    toStationId: Id Station
    quantity: Int
    stationsJson: Text
    vehicleType: FRFSVehicleType
    bppSubscriberId: Text
    bppSubscriberUrl: Text
    providerId: Text
    providerName: Text
    providerDescription: Maybe Text
    price: Price
    validTill: UTCTime
    riderId: Id Person
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId : Maybe (Id PartnerOrgTransaction)
    partnerOrgId: Maybe (Id PartnerOrganization)
    eventDiscountAmount: Maybe HighPrecMoney
    discountedTickets: Maybe Int

  beamFields:
    price:
      currency: Maybe Currency
      price: HighPrecMoney

  types:
    FRFSQuoteType:
      enum: "SingleJourney, ReturnJourney, Pass, SpecialFareSingleJourney"

  fromTType:
    price: Kernel.Types.Common.mkPrice currency price|E

  toTType:
    price: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

  constraints:
    id: PrimaryKey
    searchId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllBySearchId:
      kvFunction: findAllWithKV
      where: searchId


FRFSTicketBooking:
  tableName: frfs_ticket_booking
  derives: "Generic,Show"
  fields:
    id: Id FRFSTicketBooking
    searchId: Id FRFSSearch
    bppOrderId: Maybe Text
    quoteId: Id FRFSQuote
    status: FRFSTicketBookingStatus
    riderId: Id Person
    stationsJson: Text
    bppItemId: Text
    _type: FRFSQuoteType
    fromStationId: Id Station
    toStationId: Id Station
    quantity: Int
    vehicleType: FRFSVehicleType
    bppSubscriberId: Text
    bppSubscriberUrl: Text
    providerId: Text
    providerName: Text
    providerDescription: Maybe Text
    price: Price
    estimatedPrice: Price
    finalPrice: Maybe Price
    validTill: UTCTime
    paymentTxnId: Maybe Text
    bppBankAccountNumber: Maybe Text
    bppBankCode: Maybe Text
    cancellationCharges: Maybe HighPrecMoney
    refundAmount: Maybe HighPrecMoney
    isBookingCancellable: Maybe Bool
    customerCancelled: Bool
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId : Maybe (Id PartnerOrgTransaction)
    partnerOrgId: Maybe (Id PartnerOrganization)
    discountedTickets: Maybe Int
    eventDiscountAmount: Maybe HighPrecMoney
    payerVpa: Maybe Text

  default:
    customerCancelled: "false"

  beamFields:
    price:
      currency: Maybe Currency
      price: HighPrecMoney
    estimatedPrice:
      estimatedPrice: HighPrecMoney
    finalPrice:
      finalPrice: Maybe HighPrecMoney

  types:
    FRFSTicketBookingStatus:
      enum: "NEW, APPROVED, PAYMENT_PENDING, CONFIRMING, FAILED, CONFIRMED, CANCELLED, COUNTER_CANCELLED"

  fromTType:
    price: Kernel.Types.Common.mkPrice currency price|E
    estimatedPrice: Kernel.Types.Common.mkPrice currency estimatedPrice|E
    finalPrice: Kernel.Prelude.fmap (Kernel.Types.Common.mkPrice currency) finalPrice|E

  toTType:
    price: (.amount)|I
    estimatedPrice: (.amount)|I
    finalPrice: Kernel.Prelude.fmap (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

  constraints:
    id: PrimaryKey
    searchId: SecondaryKey
    bppOrderId: SecondaryKey
    riderId: SecondaryKey
    quoteId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByQuoteId:
      kvFunction: findOneWithKV
      where: quoteId
    findByBppOrderId:
      kvFunction: findOneWithKV
      where: bppOrderId
    findBySearchId:
      kvFunction: findOneWithKV
      where: searchId
    findAllByStatus:
      kvFunction: findAllWithKV
      where: status
    findAllByRiderId:
      kvFunction: findAllWithOptionsKV
      where: riderId
      orderBy: createdAt
    updateStatusById:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: id
    updateValidTillById:
      kvFunction: updateWithKV
      params: [validTill, updatedAt]
      where: id
    updateStatusValidTillAndPaymentTxnById:
      kvFunction: updateWithKV
      params: [status, validTill, paymentTxnId, updatedAt]
      where: id
    updateBPPOrderIdAndStatusById:
      kvFunction: updateWithKV
      params: [bppOrderId, status, updatedAt]
      where: id
    updateFinalPriceById:
      kvFunction: updateWithKV
      params: [finalPrice, updatedAt]
      where: id
    updatePriceById:
      kvFunction: updateWithKV
      params: [price, updatedAt]
      where: id
    updateBppBankDetailsById:
      kvFunction: updateWithKV
      params: [bppBankAccountNumber, bppBankCode, updatedAt]
      where: id
    updateRefundCancellationChargesAndIsCancellableByBookingId:
      kvFunction: updateOneWithKV
      params:
        [refundAmount, cancellationCharges, isBookingCancellable, updatedAt]
      where: id
    updateIsBookingCancellableByBookingId:
      kvFunction: updateOneWithKV
      params: [isBookingCancellable, updatedAt]
      where: id
    updateCustomerCancelledByBookingId:
      kvFunction: updateOneWithKV
      params: [customerCancelled, updatedAt]
      where: id

  extraOperations:
    - EXTRA_QUERY_FILE
# Make use of FareBreakup to store the fare breakup of a ticket

# Get transaction_id from Payment Transaction table

FRFSTicket:
  tableName: frfs_ticket

  fields:
    id: Id FRFSTicket
    frfsTicketBookingId: Id FRFSTicketBooking
    riderId: Id Person
    status: FRFSTicketStatus
    qrData: Text
    validTill: UTCTime
    ticketNumber: Text
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId : Maybe (Id PartnerOrgTransaction)
    partnerOrgId: Maybe (Id PartnerOrganization)
    isTicketFree: Maybe Bool

  types:
    FRFSTicketStatus:
      enum: "ACTIVE, EXPIRED, USED, CANCELLED, COUNTER_CANCELLED"

  constraints:
    id: PrimaryKey
    frfsTicketBookingId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByStatus:
      kvFunction: findOneWithKV
      where: status
    findAllByTicketBookingId:
      kvFunction: findAllWithKV
      where: frfsTicketBookingId
    updateStatusByTBookingIdAndTicketNumber:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where:
        and: [frfsTicketBookingId, ticketNumber]
    updateAllStatusByBookingId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where:
        and: [frfsTicketBookingId]

FRFSTicketBookingPayment:
  tableName: frfs_ticket_booking_payment

  fields:
    id: Id FRFSTicketBookingPayment
    frfsTicketBookingId: Id FRFSTicketBooking
    paymentOrderId: Id PaymentOrder
    status: FRFSTicketBookingPaymentStatus

  types:
    FRFSTicketBookingPaymentStatus:
      enum: "PENDING, SUCCESS, FAILED, REFUND_PENDING, REFUNDED"

  constraints:
    id: PrimaryKey
    frfsTicketBookingId: SecondaryKey
    paymentOrderId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllTicketBookingId:
      kvFunction: findAllWithKV
      where: frfsTicketBookingId
    findByPaymentOrderId:
      kvFunction: findOneWithKV
      where: paymentOrderId
    findAllByStatus:
      kvFunction: findAllWithKV
      where: status
    updateStatusByTicketBookingId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: frfsTicketBookingId

FRFSRecon:
  tableName: frfs_recon
  derives: "Generic,Show"
  fields:
    id: Id FRFSRecon
    frfsTicketBookingId: Id FRFSTicketBooking
    networkOrderId: Text # bpp_order_id
    collectorSubscriberId: Text # bap_subscriber_id
    receiverSubscriberId: Text # bpp_subscriber_id
    date: Text # on_confirm date
    time: Text # on_confirm time
    mobileNumber: Maybe Text # customer number
    sourceStationCode: Text # source station code
    destinationStationCode: Text # destination station code
    ticketQty: Int # ticket quantity
    ticketNumber: Text
    transactionRefNumber: Text # transactionId
    transactionUUID: Maybe Text # transaction uuid
    txnId: Maybe Text # transaction uuid
    fare: Price # per ticket price
    buyerFinderFee: Price # populated from bapConfig
    totalOrderValue: Price # amount paid by customer
    settlementAmount: Price # settlement amount = totalOrderValue - bff
    beneficiaryIFSC: Maybe Text # beneficiary ifsc code, from on_confirm
    beneficiaryBankAccount: Maybe Text # beneficiary bank account, from on_confirm
    collectorIFSC: Maybe Text # collector ifsc code, from bapConfig
    settlementReferenceNumber: Maybe Text # utr number, to be populated post settlement
    settlementDate: Maybe UTCTime # to be populated post settlement
    differenceAmount: Maybe Price # Nothing
    message: Maybe Text # Nothing
    ticketStatus: Maybe FRFSTicketStatus
    providerId: Text
    providerName: Text

  queries:
    updateTOrderValueAndSettlementAmountById:
      kvFunction: updateWithKV
      params: [settlementAmount, totalOrderValue, updatedAt]
      where: frfsTicketBookingId
    updateStatusByTicketBookingId:
      kvFunction: updateWithKV
      params: [ticketStatus, updatedAt]
      where: frfsTicketBookingId

  beamFields:
    fare:
      currency: Maybe Currency
      fare: HighPrecMoney
    buyerFinderFee:
      buyerFinderFee: HighPrecMoney
    totalOrderValue:
      totalOrderValue: HighPrecMoney
    settlementAmount:
      settlementAmount: HighPrecMoney
    differenceAmount:
      differenceAmount: Maybe HighPrecMoney

  fromTType:
    fare: Kernel.Types.Common.mkPrice currency fare|E
    buyerFinderFee: Kernel.Types.Common.mkPrice currency buyerFinderFee|E
    totalOrderValue: Kernel.Types.Common.mkPrice currency totalOrderValue|E
    settlementAmount: Kernel.Types.Common.mkPrice currency settlementAmount|E
    differenceAmount: Kernel.Prelude.fmap (Kernel.Types.Common.mkPrice currency) differenceAmount|E

  toTType:
    fare: (.amount)|I
    buyerFinderFee: (.amount)|I
    totalOrderValue: (.amount)|I
    settlementAmount: (.amount)|I
    differenceAmount: Kernel.Prelude.fmap (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

FRFSConfig:
  tableName: frfs_config
  derives: "Generic,Show,FromJSON,ToJSON"
  fields:
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
    bookingStartTime: UTCTime
    bookingEndTime: UTCTime
    roundTripTicketLimit: Int
    oneWayTicketLimit: Int
    metroStationTtl: Int
    discount: Int
    isEventOngoing: Maybe Bool
    freeTicketInterval: Maybe Int
    maxFreeTicketCashback: Maybe Int
    customDates: '[Text]'
    customEndTime: Text

  queries:
    findByMerchantOperatingCityId:
      kvFunction: findOneWithKV
      where: merchantOperatingCityId

  constraints:
    merchantOperatingCityId: PrimaryKey

  default:
    isEventOngoing: "false"
    freeTicketInterval: "9999"
    maxFreeTicketCashback: "0"
